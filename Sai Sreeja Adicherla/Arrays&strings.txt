ARRAYS AND STRINGS ASSIGNMENT

PROBLEM-1

class Solution {
    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {
        int m=0;
        for(int i=0;i<candies.length;i++){
if(m<candies[i]){
    m=candies[i];
}}
List<Boolean>a=new ArrayList<>();
for(int i=0;i<candies.length;i++){
    if(candies[i]+extraCandies>=m){
        a.add(true);
    }
    else{
        a.add(false);
    }

        }
        return a;

    }
}



PROBLEM-2

class Solution {
    public int maxArea(int[] h) {
        int ans=0;
        int i=0;
        int j=h.length-1;
        while(i<j){
            if(h[i]>h[j]){
                ans=Math.max(h[j]*(j-i),ans);
                j--;
            }
            else if(h[i]<=h[j]){
                ans=Math.max(h[i]*(j-i),ans);
                i++;
            }
        }
        return ans;
    }
}


PROBLEM-3


class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int closestSum = Integer.MAX_VALUE;
        for(int i=0;i<nums.length-2;i++){
            int left = i+1;
            int right = nums.length-1;
            while(left<right){
                int sum = nums[i]+nums[left]+nums[right];
                if(Math.abs(target-sum)<Math.abs(target-closestSum))
                    closestSum = sum;
                else if(target<sum)
                    right--;
                else left++;
            }
        }
        return closestSum;
    }
}



PROBLEM-4

class Solution {
    public void nextPermutation(int[] nums) {
        int i=nums.length-2;
        if(nums==null||nums.length<=1)
        {
            return;
        }
        while(i>=0 && nums[i]>=nums[i+1])

            i--;


      if(i>=0)
        {  int j=nums.length-1;
            while(nums[j]<=nums[i])

              j--;
              swap(nums,i,j);

        }
        reverse(nums,i+1,nums.length-1);
    }
        public static void swap(int nums[],int i,int j)
        {
            int t=nums[i];
            nums[i]=nums[j];
          nums[j]=t;
        }
        public static void reverse(int nums[],int i,int j)
        {
            while(i<j)
            {
                swap(nums,i++,j--);
            }


    }
}


PROBLEM-5

class Solution {
    public int search(int[] nums, int target) {
        int low=0;
        int high=nums.length-1;
        int mid;
        while(low<=high){
            mid=low+(high-low)/2;
            if(nums[mid]==target){
                return mid;
            }
            if(nums[low]<=nums[mid]){
                if(nums[low]<=target && target<=nums[mid]){
                    high=mid-1;
                }
                else{
                    low=mid+1;
                }
            }
            else if(nums[mid]<=nums[high]){
                if(nums[mid]<=target && target<=nums[high]){
                    low=mid+1;
                }
                else{
                    high=mid-1;
                }
            }
            
        }
        return -1;
    }
}


PROBLEM-6

class Solution {
   
    Set<List<Integer>> set = new HashSet<>();
    int vis[] = null;
    
    public List<List<Integer>> permuteUnique(int[] nums) {
       
        vis = new int[nums.length];
        helper(nums, new ArrayList<Integer>());
       
        return new ArrayList<>(set);
        
    }
    
    private void helper(int[] nums, List<Integer> list){
         if(list.size()==nums.length){
           set.add(new ArrayList<>(list)); 
             return;
         }
      
        for(int i=0; i<nums.length; i++){    

            if(vis[i] == 0){
                list.add(nums[i]);
                vis[i] = 1;
                helper(nums, list);
                list.remove(list.size()-1);
                vis[i] = 0;
            }

             
        }
        
        
    }
    
}


PROBLEM-7

class Solution {
    public int maxSubArray(int[] arr) {
        int n=arr.length;
        int sum=0;
        int ans=arr[0];
        int j=0;
        int k=0;
        int count=0;
        for(int i=0;i<n;i++){
            sum+=arr[i];

            if(sum>ans){
                count=Math.max(count,Math.abs(i-j+1));

                ans=sum;
            }
            if(sum<0){
                sum=0;
                j=i+1;
            }
        }
        System.out.println("count is "+count);
        return ans;
    }
}

PROBLEM-8

class Solution {
	public int[][] merge(int[][] intervals) {
		if (intervals.length <= 1)
			return intervals;

		Arrays.sort(intervals, (i1, i2) -> Integer.compare(i1[0], i2[0]));
            List<int[]> result = new ArrayList<>();
		int[] newInterval = intervals[0];
		result.add(newInterval);
		for (int[] interval : intervals) {
			if (interval[0] <= newInterval[1]) 
				newInterval[1] = Math.max(newInterval[1], interval[1]);
			else {                             
				newInterval = interval;
				result.add(newInterval);
			}
		}

		return result.toArray(new int[result.size()][]);
	}
}


PROBLEM-9

class Solution {
    public void sortColors(int[] a) {
        int i=0;
        int low=0;
        int high=a.length-1;
        while(i<=high){
            if(a[i]==0){
                swap(a,i,low);
                low=low+1;
                i=i+1;
            }
            else if(a[i]==2){
                swap(a,i,high);
                high=high-1;
            }
            else{
                i=i+1;
            }
        }
        
    }
    public void swap(int[] a,int i,int j){
        int temp=a[i];
        a[i]=a[j];
        a[j]=temp;
    }
}

PROBLEM -10

class Solution {
    public int maxProfit(int[] prices) {
        int profit = 0;
        return maxProfitDp(0, prices, prices.length, profit);
    }
    public int maxProfitDp(int startInx, int arr[], int endingInx, int profit){
        int minValue=Integer.MAX_VALUE;
        int maxProfit=0;

        for(int i=startInx; i<endingInx; i++){
            if(arr[i]<minValue)
                minValue=arr[i];
            else if(arr[i]-minValue>maxProfit){
                maxProfit=arr[i]-minValue;
                profit=(maxProfit + profit)>profit ? (maxProfit + profit) : profit;
                return maxProfitDp(i, arr, endingInx, profit);
            }
        }
        return profit;
    }
}

PROBLEM-11

class Solution {
    public int findPeakElement(int[] arr) {
         int start = 0;
        int end = arr.length - 1;
        while (start < end) {
            int mid = start + (end - start) / 2;
            if (arr[mid] > arr[mid + 1]) {
                end = mid;
            } else if (arr[mid] < arr[mid + 1]) {
                start = mid + 1;
            }
        }
        return start;
    }



PROBLEM-12

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        int n = n1 + n2;
        int[] new_arr = new int[n];

        int i=0, j=0, k=0;

        while (i<=n1 && j<=n2) {
            if (i == n1) {
                while(j<n2) new_arr[k++] = nums2[j++];
                break;
            } else if (j == n2) {
                while (i<n1) new_arr[k++] = nums1[i++];
                break;
            }

            if (nums1[i] < nums2[j]) {
                new_arr[k++] = nums1[i++];
            } else {
                new_arr[k++] = nums2[j++];
            }
        }

        if (n%2==0) return (float)(new_arr[n/2-1] + new_arr[n/2])/2;
        else return new_arr[n/2];
    }
}


PROBLEM-13

class Solution {
    public int maxArea(int[] h) {
        int ans=0;
        int i=0;
        int j=h.length-1;
        while(i<j){
            if(h[i]>h[j]){
                ans=Math.max(h[j]*(j-i),ans);
                j--;
            }
            else if(h[i]<=h[j]){
                ans=Math.max(h[i]*(j-i),ans);
                i++;
            }
        }
        return ans;
    }
}

PROBLEM-14

class Solution {
    public int findMaxConsecutiveOnes(int[] arr) {
        
        int cnt=0;
        int ans=0;
        int i=0;
        int j=0;
        int sum=0;
        for(i=0;i<arr.length;i++){
            if(arr[i]==1){
                cnt++;
                ans=Math.max(cnt,ans);
            }
            else{
                cnt=0;
            }
        }
        return ans;
    }
}

PROBLEM-15

public class Solution {
    public int findKthLargest(int[] nums, int k) {
        int start = 0, end = nums.length - 1, index = nums.length - k;
        while (start < end) {
            int pivot = partion1(nums, start, end);
            if (pivot < index) start = pivot + 1; 
            else if (pivot > index) end = pivot - 1;
            else return nums[pivot];
        }
        return nums[start];
    }
    
    public int partion1(int[] nums, int start, int end) {
        int pivot = start, temp;
        while (start <= end) {
            while (start <= end && nums[start] <= nums[pivot]) start++;
            while (start <= end && nums[end] > nums[pivot]) end--;
            if (start > end) break;
            temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
        }
        temp = nums[end];
        nums[end] = nums[pivot];
        nums[pivot] = temp;
        return end;
    }
}

