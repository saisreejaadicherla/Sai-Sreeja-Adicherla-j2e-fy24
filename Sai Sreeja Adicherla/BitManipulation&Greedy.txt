Bit Manipulation & Greedy Assignment


PROBLEM-1

import java.util.*;
class Solution{
    public static int countSlicingSteps(int[] A) {
        int maxCount = 0;
        Map<Integer, Integer> weightCounts = new HashMap<>();
        for (int weight : A) {
            weightCounts.put(weight, weightCounts.getOrDefault(weight, 0) + 1);
            maxCount = Math.max(maxCount, weightCounts.get(weight));
        }
        int steps = 0;
        for (int count : weightCounts.values()) {
            steps += count == maxCount ? 1 : count;
        }
        return steps;
    }
    public static void main(String[] args) {
        int[] A1 = {3, 6, 7, 7};
        System.out.println(countSlicingSteps(A1));
        int[] A2 = {20, 40, 30, 50, 40, 20};
        System.out.println(countSlicingSteps(A2));
    }
}


PROBLEM-2

class Solution {
    public int coinChange(int[] coins, int amount) {
        int[]dp=new int[amount+1];
        Arrays.fill(dp,amount+1);
        dp[0]=0;
        for(int c:coins){
            for(int i=c;i<=amount;i++){
                dp[i]=Math.min(dp[i],dp[i-c]+1);
            }
        }
        return dp[amount]<=amount ? dp[amount] : -1;
    }
}

PROBLEM-3

class Solution{
    public static int Solution(int[] a) {
        int n = a.length;
        int sum = 0;
        int maxCandies = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            maxCandies = Math.max(maxCandies, a[i]);
        }
        for (int i = 0; i < n; i++) {
            sum += maxCandies - a[i];
        }
        return sum;
    }
    public static void main(String[] args) {
        int[] a1 = {1, 2, 3, 4, 5};
        System.out.println(Solution(a1));
        int[] a2 = {1, 2, 3, 5, 1, 2, 7, 9, 13, 5};
        System.out.println(Solution(a2));
    }
}

 

PROBLEM-4


public class Solution{
    public static int Solution(int N, int V, int[] a) {
        int pillsTaken = 0;
        int health = V;
        for (int i = 0; i < N; i++) {
            if (health <= 0) {
                break; 
            }
            if (a[i] > 1 && health <= 1) {

                pillsTaken++;
                health = a[i] - 1;
            } 
            else if (a[i] > health) {
                pillsTaken++;
                health = a[i];
            }
            health--;
        }
        return pillsTaken;
    }
}


PROBLEM-5

import java.util.*;
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<Integer> li = new ArrayList<>();
        List<List<Integer>> ans = new ArrayList<>();
        subset(nums,0,li,ans);
        return ans;
    }
    public static void subset(int[] num,int i,List<Integer> li,List<List<Integer>> ans){
	    if(i==num.length){
	        ans.add(new ArrayList<>(li));
	        return;
	    }
	    subset(num,i+1,li,ans);
        li.add(num[i]);
	    subset(num,i+1,li,ans);
        li.remove(li.size()-1);
	}
}


PROBLEM-6

import java.util.*;
class Solution {
    public int singleNumber(int[] nums) {
        int[] bits = new int[32];
        for(int num : nums){
            int bit = 0;
            if(num < 0) num = -num - 1;
            while(num > 0){
                bits[bit] += (1 & num);
                bit++;
                num >>= 1;
            }
        }
        int res = 0;
        for(int i=0;i<32;i++){
            bits[i] %= 3; 
            res +=  bits[i] * (1 << i);
        }
        for(int num : nums){
            if(num == res) return res;
        }
        return -res - 1;
    }
}

PROBLEM-7

class Solution {
	static int minXOR(int arr[], int n){
		int min_xor = Integer.MAX_VALUE; 
		for (int i = 0; i < n; i++)
			for (int j = i + 1; j < n; j++)
				min_xor = Math.min(min_xor, arr[i] ^ arr[j]);
		return min_xor;
	}
}



PROBLEM-8

class Solution {
    public static int singleNumber(int[] nums) {
        for(int i=0;i<nums.length;i++){
            int c=0;
            for(int j=0;j<nums.length;j++){
                if(nums[i]==nums[j]){
                    c++;
                }
            }
            if(c==1){
                return nums[i];
            }
        }
        return 0;
    }
}


PROBLEM-9

import java.io.*;
class Solution{
	static int hammingDistance(int x, int y)
{
	int ans = 0;
	int m = Math.max(x, y);
	while (m>0) {
		int c1 = x & 1;
		int c2 = y & 1;
		if (c1 != c2)
			ans += 1;
		m = m >> 1;
		x = x >> 1;
		y = y >> 1;
	}
	return ans;
}
}

PROBLEM-10

import java.io.*;
class Solution{

	public static int reverseBits(int n){
		int rev = 0;
		while (n > 0) {
			rev <<= 1;
			if ((int)(n & 1) == 1)
				rev ^= 1;
			n >>= 1;
		}
		return rev;
	}
}



