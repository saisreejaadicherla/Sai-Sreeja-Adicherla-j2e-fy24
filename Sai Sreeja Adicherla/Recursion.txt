RECURSION ASSIGNMENT 

PROBLEM-1

class solution{
static public void printAllKLength(char[] set, int k){
	int n = set.length;
	printAllKLengthRec(set, "", n, k);
}
static public void printAllKLengthRec(char[] set, String prefix,int n, int k){
	if (k == 0){
		System.out.println(prefix);
		return;
	}
	for (int i = 0; i < n; ++i){
		String newPrefix = prefix + set[i];
		printAllKLengthRec(set, newPrefix,n, k - 1);
	}
}


PROBLEM-2

import java.util.Scanner;
public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int m = scanner.nextInt();
        int n = scanner.nextInt();
        int a = m + n - 2;
        int b = m - 1;
        double r = 1;
        for (int i = 1; i <= b; i++) {
            r = r * (a - b + i) / i;
        }
        System.out.println((int) r);

    }
}



PROBLEM-3

class Solution {
    private ListNode temp;
    private boolean isStop;
    public void reorderList(ListNode head) {
        temp = head;
        isStop = false;
        reorder(head);
    }
    private void reorder(ListNode head) {
        if (head == null) return;
        reorder(head.next);
        if (!isStop) {
            ListNode next = temp.next;
            temp.next = head;
            head.next = next;
            temp = next;
        }

        if (temp != null && temp.next == head) {
            temp.next = null;
            isStop = true;
        }
    }
}


PROBLEM-4

class Solution{
void solve(int n, int src, int des, int helper){
if(n==1){
cout<<"Moving disc 1 from "<<src<<" to" << des<<endl;
return;
}
solve(n-1, src, helper, des);
cout<<"Moving disc "<<n<<"from "<<1<<" to "<<des<<endl;
solve(n-1, helper, des, src);
return;
}
}

PROBLEM -5

import java.util.*;
class Solution {
    public static List<TreeNode> find(int n){
        List<TreeNode>list=new ArrayList<>();
        if(n==1){list.add(new TreeNode(0));return list;}
        for(int i=1;i<n;i+=2){
            List<TreeNode>left=find(i);
            List<TreeNode>right=find(n-i-1);
            for(TreeNode l : left)
                for(TreeNode r : right){
                    TreeNode root=new TreeNode(0,l,r);
                    list.add(root);
                }
        }
        return list;
    }
    public static List<TreeNode> allPossibleFBT(int n) {
       if(n%2==0)return new ArrayList<>();
        return find(n);
        
    }
}

PROBLEM-6

import java.io.*;
class Solution {
	static void subsetSums(int[] arr, int l, int r, int sum)
	{
		if (l > r) {
			System.out.print(sum + " ");
			return;
		}
		subsetSums(arr, l + 1, r, sum + arr[l]);
		subsetSums(arr, l + 1, r, sum);
	}
}


PROBLEM -7

class KnapsackzerobyoneDP {
    public static int knapsack(int val[],int wt[],int W,int n){
        if(W==0||n==0){
            return 0;
        }
        if(wt[n-1]<=W){
            int ans1=val[n-1]+knapsack(val, wt, W-wt[n-1], n-1);
            int ans2=knapsack(val, wt, W, n-1);
            return Math.max(ans1,ans2);
        }
        else{
            return knapsack(val, wt, W, n-1);
        }
    }
	public static void main(String[] args){
        int val[]={15,14,10,45,30};
        int wt[]={2,5,1,3,4};
        int W=7;
        System.out.println(knapsack(val, wt, W, val.length));
	}
}


PROBLEM-8

class Solution {
    public List<List<String>> partition(String s) {
        List<String>p=new ArrayList<>();
        List<List<String>>ll=new ArrayList<>();
fun(0,s,p,ll);
return ll;
 }
 public static void fun (int i,String s,List<String>p,List<List<String>>ll)
 {
     if(i==s.length())
     {
         ll.add(new ArrayList<>(p));
         return ;
     }
     for(int j=i;j<s.length();j++){
    if(pal(s,i,j))
    {
        p.add(s.substring(i,j+1));

    fun(j+1,s,p,ll);
    p.remove(p.size()-1);
    }
 }
 }
 public static boolean pal(String s,int st,int e){

 while(st<=e)
 {
     if(s.charAt(st++)!=s.charAt(e--)){
         return false;
     }
 }
     return true;
 }
}








